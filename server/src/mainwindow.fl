# data file for the Fltk User Interface Designer (fluid)
version 1.0308
header_name {.hpp}
code_name {.cpp}
decl {\#include <asio.hpp>} {public global
}

decl {\#include <ctime>} {public global
}

decl {\#include <string>} {public global
}

decl {\#include <mutex>} {private local
}

decl {\#include "fflerror.hpp"} {private local
}

decl {\#include "serverargparser.hpp"} {private local
}

decl {class CommandWindow;} {public global
}

class MainWindow {} {
  Function {MainWindow()} {} {
    Fl_Window m_window {
      label MonoServer
      callback {{
	// do nothing
}}
      xywh {645 288 720 400} type Double labelfont 4 resizable visible
    } {
      Fl_Menu_Bar {} {
        xywh {0 0 721 25} box FLAT_BOX labelfont 4 textfont 4
      } {
        Submenu {} {
          label Server
          xywh {0 0 62 20} labelfont 4
        } {
          MenuItem m_launchMenu {
            label {Launch        }
            callback {{
	extern MonoServer *g_monoServer;
	delete g_monoServer;

	g_monoServer = new MonoServer();
	g_monoServer->Launch();

	m_launchMenu->deactivate();
}}
            xywh {0 0 30 20} shortcut 0x4006c labelfont 4 divider
            code0 {\#include "monoserver.hpp"}
          }
          MenuItem {} {
            label Pause
            xywh {10 10 30 20} shortcut 0x40070 labelfont 4 divider
          }
          MenuItem {} {
            label Quit
            callback {{
	exit(0);
}}
            xywh {20 20 30 20} shortcut 0x40071 labelfont 4
          }
        }
        Submenu {} {
          label Configure
          xywh {0 0 62 20} labelfont 4
        } {
          MenuItem {} {
            label {Server        }
            callback {{
	extern ServerConfigureWindow	*g_serverConfigureWindow;
	g_serverConfigureWindow->showAll();
}}
            xywh {10 10 30 20} labelfont 4 divider
            code0 {\#include "serverconfigurewindow.hpp"}
          }
          Submenu {} {
            label Fonts
            xywh {0 0 70 21} labelfont 4
          } {
            MenuItem m_menuItemFirstFont {
              label dynamic_label
              xywh {10 10 36 21} labelfont 4
            }
            MenuItem {} {
              label dynamic_label
              xywh {20 20 36 21} labelfont 4
            }
            MenuItem {} {
              label dynamic_label
              xywh {30 30 36 21} labelfont 4
            }
            MenuItem {} {
              label dynamic_label
              xywh {40 40 36 21} labelfont 4
            }
            MenuItem {} {
              label dynamic_label
              xywh {50 50 36 21} labelfont 4
            }
            MenuItem {} {
              label dynamic_label
              xywh {60 60 36 21} labelfont 4
            }
            MenuItem {} {
              label dynamic_label
              xywh {70 70 36 21} labelfont 4
            }
            MenuItem {} {
              label dynamic_label
              xywh {80 80 36 21} labelfont 4
            }
            MenuItem {} {
              label dynamic_label
              xywh {90 90 36 21} labelfont 4
            }
            MenuItem {} {
              label dynamic_label
              xywh {100 100 36 21} labelfont 4
            }
            MenuItem {} {
              label dynamic_label
              xywh {110 110 36 21} labelfont 4
            }
            MenuItem {} {
              label dynamic_label
              xywh {120 120 36 21} labelfont 4
            }
            MenuItem {} {
              label dynamic_label
              xywh {130 130 36 21} labelfont 4
            }
            MenuItem {} {
              label dynamic_label
              xywh {140 140 36 21} labelfont 4
            }
            MenuItem {} {
              label dynamic_label
              xywh {150 150 36 21} labelfont 4
            }
            MenuItem {} {
              label dynamic_label
              xywh {160 160 36 21} labelfont 4
            }
            MenuItem {} {
              label dynamic_label
              xywh {170 170 36 21} labelfont 4
            }
            MenuItem {} {
              label dynamic_label
              xywh {180 180 36 21} labelfont 4
            }
            MenuItem {} {
              label dynamic_label
              xywh {190 190 36 21} labelfont 4
            }
            MenuItem {} {
              label dynamic_label
              xywh {180 180 36 21} labelfont 4
            }
            MenuItem {} {
              label dynamic_label
              xywh {190 190 36 21} labelfont 4
            }
            MenuItem {} {
              label dynamic_label
              xywh {200 200 36 21} labelfont 4
            }
            MenuItem {} {
              label dynamic_label
              xywh {210 210 36 21} labelfont 4
            }
            MenuItem {} {
              label dynamic_label
              xywh {200 200 36 21} labelfont 4
            }
            MenuItem {} {
              label dynamic_label
              xywh {210 210 36 21} labelfont 4
            }
            MenuItem {} {
              label dynamic_label
              xywh {220 220 36 21} labelfont 4
            }
            MenuItem {} {
              label dynamic_label
              xywh {230 230 36 21} labelfont 4
            }
            MenuItem {} {
              label dynamic_label
              xywh {240 240 36 21} labelfont 4
            }
            MenuItem {} {
              label dynamic_label
              xywh {250 250 36 21} labelfont 4
            }
            MenuItem {} {
              label dynamic_label
              xywh {260 260 36 21} labelfont 4
            }
            MenuItem {} {
              label dynamic_label
              xywh {270 270 36 21} labelfont 4
            }
            MenuItem {} {
              label dynamic_label
              xywh {280 280 36 21} labelfont 4
            }
            MenuItem {} {
              label dynamic_label
              xywh {290 290 36 21} labelfont 4
            }
            MenuItem {} {
              label dynamic_label
              xywh {300 300 36 21} labelfont 4
            }
            MenuItem {} {
              label dynamic_label
              xywh {310 310 36 21} labelfont 4
            }
            MenuItem {} {
              label dynamic_label
              xywh {320 320 36 21} labelfont 4
            }
            MenuItem {} {
              label dynamic_label
              xywh {330 330 36 21} labelfont 4
            }
            MenuItem {} {
              label dynamic_label
              xywh {340 340 36 21} labelfont 4
            }
            MenuItem {} {
              label dynamic_label
              xywh {350 350 36 21} labelfont 4
            }
            MenuItem {} {
              label dynamic_label
              xywh {360 360 36 21} labelfont 4
            }
            MenuItem {} {
              label dynamic_label
              xywh {370 370 36 21} labelfont 4
            }
            MenuItem {} {
              label dynamic_label
              xywh {380 380 36 21} labelfont 4
            }
            MenuItem {} {
              label dynamic_label
              xywh {390 390 36 21} labelfont 4
            }
            MenuItem {} {
              label dynamic_label
              xywh {400 400 36 21} labelfont 4
            }
            MenuItem {} {
              label dynamic_label
              xywh {410 410 36 21} labelfont 4
            }
            MenuItem {} {
              label dynamic_label
              xywh {420 420 36 21} labelfont 4
            }
            MenuItem {} {
              label dynamic_label
              xywh {430 430 36 21} labelfont 4
            }
            MenuItem {} {
              label dynamic_label
              xywh {330 330 36 21} labelfont 4
            }
            MenuItem {} {
              label dynamic_label
              xywh {340 340 36 21} labelfont 4
            }
            MenuItem {} {
              label dynamic_label
              xywh {350 350 36 21} labelfont 4
            }
            MenuItem {} {
              label dynamic_label
              xywh {360 360 36 21} labelfont 4
            }
            MenuItem {} {
              label dynamic_label
              xywh {370 370 36 21} labelfont 4
            }
            MenuItem {} {
              label dynamic_label
              xywh {380 380 36 21} labelfont 4
            }
            MenuItem {} {
              label dynamic_label
              xywh {390 390 36 21} labelfont 4
            }
            MenuItem {} {
              label dynamic_label
              xywh {400 400 36 21} labelfont 4
            }
            MenuItem {} {
              label dynamic_label
              xywh {410 410 36 21} labelfont 4
            }
            MenuItem {} {
              label dynamic_label
              xywh {420 420 36 21} labelfont 4
            }
            MenuItem {} {
              label dynamic_label
              xywh {430 430 36 21} labelfont 4
            }
            MenuItem {} {
              label dynamic_label
              xywh {440 440 36 21} labelfont 4
            }
            MenuItem {} {
              label dynamic_label
              xywh {450 450 36 21} labelfont 4
            }
            MenuItem {} {
              label dynamic_label
              xywh {460 460 36 21} labelfont 4
            }
            MenuItem {} {
              label dynamic_label
              xywh {470 470 36 21} labelfont 4
            }
            MenuItem {} {
              label dynamic_label
              xywh {480 480 36 21} labelfont 4
            }
            MenuItem {} {
              label dynamic_label
              xywh {490 490 36 21} labelfont 4
            }
            MenuItem {} {
              label dynamic_label
              xywh {500 500 36 21} labelfont 4
            }
            MenuItem {} {
              label dynamic_label
              xywh {510 510 36 21} labelfont 4
            }
            MenuItem {} {
              label dynamic_label
              xywh {520 520 36 21} labelfont 4
            }
            MenuItem {} {
              label dynamic_label
              xywh {530 530 36 21} labelfont 4
            }
            MenuItem {} {
              label dynamic_label
              xywh {540 540 36 21} labelfont 4
            }
            MenuItem {} {
              label dynamic_label
              xywh {550 550 36 21} labelfont 4
            }
            MenuItem {} {
              label dynamic_label
              xywh {560 560 36 21} labelfont 4
            }
            MenuItem {} {
              label dynamic_label
              xywh {570 570 36 21} labelfont 4
            }
            MenuItem {} {
              label dynamic_label
              xywh {580 580 36 21} labelfont 4
            }
            MenuItem {} {
              label dynamic_label
              xywh {590 590 36 21} labelfont 4
            }
            MenuItem {} {
              label dynamic_label
              xywh {600 600 36 21} labelfont 4
            }
            MenuItem {} {
              label dynamic_label
              xywh {610 610 36 21} labelfont 4
            }
            MenuItem {} {
              label dynamic_label
              xywh {620 620 36 21} labelfont 4
            }
            MenuItem {} {
              label dynamic_label
              xywh {630 630 36 21} labelfont 4
            }
            MenuItem {} {
              label dynamic_label
              xywh {640 640 36 21} labelfont 4
            }
            MenuItem {} {
              label dynamic_label
              xywh {650 650 36 21} labelfont 4
            }
            MenuItem {} {
              label dynamic_label
              xywh {660 660 36 21} labelfont 4
            }
            MenuItem {} {
              label dynamic_label
              xywh {670 670 36 21} labelfont 4
            }
            MenuItem {} {
              label dynamic_label
              xywh {680 680 36 21} labelfont 4
            }
            MenuItem {} {
              label dynamic_label
              xywh {690 690 36 21} labelfont 4
            }
            MenuItem {} {
              label dynamic_label
              xywh {700 700 36 21} labelfont 4
            }
            MenuItem {} {
              label dynamic_label
              xywh {710 710 36 21} labelfont 4
            }
            MenuItem {} {
              label dynamic_label
              xywh {720 720 36 21} labelfont 4
            }
            MenuItem {} {
              label dynamic_label
              xywh {730 730 36 21} labelfont 4
            }
            MenuItem {} {
              label dynamic_label
              xywh {740 740 36 21} labelfont 4
            }
            MenuItem {} {
              label dynamic_label
              xywh {750 750 36 21} labelfont 4
            }
            MenuItem {} {
              label dynamic_label
              xywh {760 760 36 21} labelfont 4
            }
            MenuItem {} {
              label dynamic_label
              xywh {770 770 36 21} labelfont 4
            }
            MenuItem {} {
              label dynamic_label
              xywh {780 780 36 21} labelfont 4
            }
            MenuItem {} {
              label dynamic_label
              xywh {790 790 36 21} labelfont 4
            }
            MenuItem {} {
              label dynamic_label
              xywh {800 800 36 21} labelfont 4
            }
            MenuItem {} {
              label dynamic_label
              xywh {810 810 36 21} labelfont 4
            }
            MenuItem {} {
              label dynamic_label
              xywh {820 820 36 21} labelfont 4
            }
            MenuItem {} {
              label dynamic_label
              xywh {830 830 36 21} labelfont 4
            }
            MenuItem {} {
              label dynamic_label
              xywh {840 840 36 21} labelfont 4
            }
            MenuItem {} {
              label dynamic_label
              xywh {850 850 36 21} labelfont 4
            }
            MenuItem {} {
              label dynamic_label
              xywh {860 860 36 21} labelfont 4
            }
            MenuItem {} {
              label dynamic_label
              xywh {870 870 36 21} labelfont 4
            }
            MenuItem {} {
              label dynamic_label
              xywh {880 880 36 21} labelfont 4
            }
            MenuItem {} {
              label dynamic_label
              xywh {890 890 36 21} labelfont 4
            }
            MenuItem {} {
              label dynamic_label
              xywh {900 900 36 21} labelfont 4
            }
            MenuItem {} {
              label dynamic_label
              xywh {910 910 36 21} labelfont 4
            }
            MenuItem {} {
              label dynamic_label
              xywh {920 920 36 21} labelfont 4
            }
            MenuItem {} {
              label dynamic_label
              xywh {930 930 36 21} labelfont 4
            }
            MenuItem {} {
              label dynamic_label
              xywh {940 940 36 21} labelfont 4
            }
            MenuItem {} {
              label dynamic_label
              xywh {950 950 36 21} labelfont 4
            }
            MenuItem {} {
              label dynamic_label
              xywh {960 960 36 21} labelfont 4
            }
            MenuItem {} {
              label dynamic_label
              xywh {970 970 36 21} labelfont 4
            }
            MenuItem {} {
              label dynamic_label
              xywh {980 980 36 21} labelfont 4
            }
            MenuItem {} {
              label dynamic_label
              xywh {980 980 36 21} labelfont 4
            }
            MenuItem {} {
              label dynamic_label
              xywh {990 990 36 21} labelfont 4
            }
            MenuItem {} {
              label dynamic_label
              xywh {1000 1000 36 21} labelfont 4
            }
            MenuItem {} {
              label dynamic_label
              xywh {1010 1010 36 21} labelfont 4
            }
            MenuItem {} {
              label dynamic_label
              xywh {1020 1020 36 21} labelfont 4
            }
            MenuItem {} {
              label dynamic_label
              xywh {1030 1030 36 21} labelfont 4
            }
            MenuItem {} {
              label dynamic_label
              xywh {1040 1040 36 21} labelfont 4
            }
            MenuItem {} {
              label dynamic_label
              xywh {1050 1050 36 21} labelfont 4
            }
            MenuItem {} {
              label dynamic_label
              xywh {1060 1060 36 21} labelfont 4
            }
            MenuItem {} {
              label dynamic_label
              xywh {1070 1070 36 21} labelfont 4
            }
            MenuItem {} {
              label dynamic_label
              xywh {1080 1080 36 21} labelfont 4
            }
            MenuItem m_menuItemLastFont {
              label dynamic_label
              xywh {20 20 36 21} labelfont 4
            }
          }
        }
        Submenu m_commandMenuButton {
          label Command
          xywh {15 15 62 20} labelfont 4
        } {
          MenuItem m_subMenuRunCommand {
            label {Run            }
            callback {// create a new command window if pressed
// to retrieve the created windows, use cwid to find it
{
    if(CreateCommandWindow() > 0){
    }
    else{
        fl_alert("%s", "Create command window failed");
    }
}}
            xywh {0 0 36 20} labelfont 4 divider
          }
          MenuItem m_menuItemToggleAll {
            label {Toggle All}
            callback {// toggle all
// if all open close all
// if all close then open all
{
    static bool bOpen = true;

    if(bOpen){
        bOpen = false;
    }
    else{
        bOpen = true;
    }

    for(int nIndex = 1; nIndex <= (1 + to_d(m_menuItemLastCW - m_menuItemFirstCW)); ++nIndex){
        if(auto pCW = getCommandWindow(nIndex)){
            if(bOpen){
                pCW->showAll();
                (m_menuItemFirstCW + (nIndex - 1))->deactivate();
            }
            else{
                pCW->hideAll();
                (m_menuItemFirstCW + (nIndex - 1))->activate();
            }
        }
    }
}}
            xywh {10 10 36 20} labelfont 4
          }
          MenuItem m_menuItemFirstCW {
            label {Window 01}
            callback {// when enabled
// it can show it's command window
{
    int nMenuItem = 1;
    if(auto pCW = getCommandWindow(nMenuItem)){
        pCW->showAll();
        (m_menuItemFirstCW + (nMenuItem - 1))->deactivate();
    }
}}
            xywh {40 40 36 20} labelfont 4 hide
            code0 {\#include "commandwindow.hpp"}
          }
          MenuItem {} {
            label {Window 02}
            callback {// when enabled
// it can show it's command window
{
    int nMenuItem = 2;
    if(auto pCW = getCommandWindow(nMenuItem)){
        pCW->showAll();
        (m_menuItemFirstCW + (nMenuItem - 1))->deactivate();
    }
}}
            xywh {50 50 36 20} labelfont 4 hide
          }
          MenuItem {} {
            label {Window 03}
            callback {// when enabled
// it can show it's command window
{
    int nMenuItem = 3;
    if(auto pCW = getCommandWindow(nMenuItem)){
        pCW->showAll();
        (m_menuItemFirstCW + (nMenuItem - 1))->deactivate();
    }
}}
            xywh {60 60 36 20} labelfont 4 hide
          }
          MenuItem {} {
            label {Window 04}
            callback {// when enabled
// it can show it's command window
{
    int nMenuItem = 4;
    if(auto pCW = getCommandWindow(nMenuItem)){
        pCW->showAll();
        (m_menuItemFirstCW + (nMenuItem - 1))->deactivate();
    }
}}
            xywh {70 70 36 20} labelfont 4 hide
          }
          MenuItem {} {
            label {Window 05}
            callback {// when enabled
// it can show it's command window
{
    int nMenuItem = 5;
    if(auto pCW = getCommandWindow(nMenuItem)){
        pCW->showAll();
        (m_menuItemFirstCW + (nMenuItem - 1))->deactivate();
    }
}}
            xywh {80 80 36 20} labelfont 4 hide
          }
          MenuItem {} {
            label {Window 06}
            callback {// when enabled
// it can show it's command window
{
    int nMenuItem = 6;
    if(auto pCW = getCommandWindow(nMenuItem)){
        pCW->showAll();
        (m_menuItemFirstCW + (nMenuItem - 1))->deactivate();
    }
}}
            xywh {90 90 36 20} labelfont 4 hide
          }
          MenuItem {} {
            label {Window 07}
            callback {// when enabled
// it can show it's command window
{
    int nMenuItem = 7;
    if(auto pCW = getCommandWindow(nMenuItem)){
        pCW->showAll();
        (m_menuItemFirstCW + (nMenuItem - 1))->deactivate();
    }
}}
            xywh {100 100 36 20} labelfont 4 hide
          }
          MenuItem {} {
            label {Window 08}
            callback {// when enabled
// it can show it's command window
{
    int nMenuItem = 8;
    if(auto pCW = getCommandWindow(nMenuItem)){
        pCW->showAll();
        (m_menuItemFirstCW + (nMenuItem - 1))->deactivate();
    }
}}
            xywh {110 110 36 20} labelfont 4 hide
          }
          MenuItem {} {
            label {Window 09}
            callback {// when enabled
// it can show it's command window
{
    int nMenuItem = 9;
    if(auto pCW = getCommandWindow(nMenuItem)){
        pCW->showAll();
        (m_menuItemFirstCW + (nMenuItem - 1))->deactivate();
    }
}}
            xywh {120 120 36 20} labelfont 4 hide
          }
          MenuItem {} {
            label {Window 10}
            callback {// when enabled
// it can show it's command window
{
    int nMenuItem = 10;
    if(auto pCW = getCommandWindow(nMenuItem)){
        pCW->showAll();
        (m_menuItemFirstCW + (nMenuItem - 1))->deactivate();
    }
}}
            xywh {130 130 36 20} labelfont 4 hide
          }
          MenuItem {} {
            label {Window 11}
            callback {// when enabled
// it can show it's command window
{
    int nMenuItem = 11;
    if(auto pCW = getCommandWindow(nMenuItem)){
        pCW->showAll();
        (m_menuItemFirstCW + (nMenuItem - 1))->deactivate();
    }
}}
            xywh {140 140 36 20} labelfont 4 hide
          }
          MenuItem {} {
            label {Window 12}
            callback {// when enabled
// it can show it's command window
{
    int nMenuItem = 12;
    if(auto pCW = getCommandWindow(nMenuItem)){
        pCW->showAll();
        (m_menuItemFirstCW + (nMenuItem - 1))->deactivate();
    }
}}
            xywh {140 140 36 20} labelfont 4 hide
          }
          MenuItem {} {
            label {Window 13}
            callback {// when enabled
// it can show it's command window
{
    int nMenuItem = 13;
    if(auto pCW = getCommandWindow(nMenuItem)){
        pCW->showAll();
        (m_menuItemFirstCW + (nMenuItem - 1))->deactivate();
    }
}}
            xywh {150 150 36 20} labelfont 4 hide
          }
          MenuItem {} {
            label {Window 14}
            callback {// when enabled
// it can show it's command window
{
    int nMenuItem = 14;
    if(auto pCW = getCommandWindow(nMenuItem)){
        pCW->showAll();
        (m_menuItemFirstCW + (nMenuItem - 1))->deactivate();
    }
}}
            xywh {160 160 36 20} labelfont 4 hide
          }
          MenuItem {} {
            label {Window 15}
            callback {// when enabled
// it can show it's command window
{
    int nMenuItem = 15;
    if(auto pCW = getCommandWindow(nMenuItem)){
        pCW->showAll();
        (m_menuItemFirstCW + (nMenuItem - 1))->deactivate();
    }
}}
            xywh {170 170 36 20} labelfont 4 hide
          }
          MenuItem m_menuItemLastCW {
            label {Window 16}
            callback {// when enabled
// it can show it's command window
{
    int nMenuItem = 16;
    if(auto pCW = getCommandWindow(nMenuItem)){
        pCW->showAll();
        (m_menuItemFirstCW + (nMenuItem - 1))->deactivate();
    }
}}
            xywh {180 180 36 20} labelfont 4 hide
          }
        }
        Submenu {} {
          label Script
          xywh {0 0 100 20} labelfont 4
        } {
          MenuItem {} {
            label {Load        }
            callback {{
    Fl_Native_File_Chooser stFileChooser;
    stFileChooser.title("Load Server Lua Script...");
    stFileChooser.options(Fl_Native_File_Chooser::NO_OPTIONS);
    stFileChooser.type(Fl_Native_File_Chooser::BROWSE_FILE);

    stFileChooser.directory(".");

    switch(stFileChooser.show()){
        case -1:
            {
                fl_alert("%s", stFileChooser.errmsg());
                break;
            }
        case 1:
            {
                break;
            }
        default:
            {
                std::string szFileName = stFileChooser.filename();
                std::replace(szFileName.begin(), szFileName.end(), '\\\\', '/');

                extern ScriptWindow *g_scriptWindow;
                g_scriptWindow->LoadFile(szFileName.c_str());
            }
    }

}}
            xywh {0 0 100 20} labelfont 4
            code0 {\#include "scriptwindow.hpp"}
          }
        }
        Submenu {} {
          label Monitor
          xywh {0 0 70 21} labelfont 4
        } {
          MenuItem {} {
            label {Actor               }
            callback {// show actor information window
{
    extern ActorMonitorWindow *g_actorMonitorWindow;
    g_actorMonitorWindow->showAll();
}}
            xywh {0 0 36 21} labelfont 4 divider
            code0 {\#include "actormonitorwindow.hpp"}
          }
          MenuItem {} {
            label {Actor Pod}
            callback {// show actor pod window
{
    extern PodMonitorWindow *g_podMonitorWindow;
    g_podMonitorWindow->showAll();
}}
            xywh {10 10 36 21} labelfont 4 divider
            code0 {\#include "podmonitorwindow.hpp"}
          }
          MenuItem {} {
            label {Actor Thread}
            xywh {0 0 36 21} labelfont 4 divider
          }
          MenuItem {} {
            label {Function Profiler}
            callback {// show profiler window
{
    extern ProfilerWindow *g_profilerWindow;
    g_profilerWindow->showAll();
}}
            xywh {10 10 36 21} labelfont 4
            code0 {\#include "profilerwindow.hpp"}
          }
        }
      }
      Fl_Browser m_browser {
        xywh {0 24 720 375} type Hold labelfont 4 textfont 4 resizable
      }
    }
    code {// insert font menus
{
    // trying to insert font-selection menu items
    // dynamically changing menus for fluid created gui is dangerous
    auto fnCallback = [](Fl_Widget *, void *pArg) -> void
    {
        extern MainWindow *g_mainWindow;
        g_mainWindow->setGUIFont(to_d((intptr_t)(pArg)));
    };

    int nFontCount = Fl::set_fonts("-*");
    for(auto pMenuItem = m_menuItemFirstFont; pMenuItem <= m_menuItemLastFont; ++pMenuItem){
        auto nIndex = to_d(pMenuItem - m_menuItemFirstFont);
        if(nIndex >= nFontCount){
            pMenuItem->hide();
            continue;
        }

        int nFontType = -1;
        const char *szFontName = Fl::get_font_name((Fl_Font)(nIndex), &nFontType);
        if(!szFontName){
            break;
        }

        pMenuItem->label(szFontName);
        pMenuItem->labelfont((Fl_Font)(nIndex));
        pMenuItem->callback((Fl_Callback *)(fnCallback), (void *)((intptr_t)(nIndex)));
        pMenuItem->show();
    }

    extern ServerArgParser *g_serverArgParser;
    if(g_serverArgParser->autoLaunch){
        m_launchMenu->deactivate();
    }
}} {}
  }
  Function {showAll()} {} {
    code {{
    m_window->show();
}} {}
  }
  Function {addLog(int nLogType, const char *szMessage)} {return_type void
  } {
    code {// addLog(int nLogType, const char *szMessage)
{
    // this function only interact with FLTK
    // for multi-thread lock and unlock, don't put it here
    //
    // refer to http://www.fltk.org/doc-1.3/group_fl_multithread.html
    // FLTK requests to do rendering in main thread, so
    //    1. use Fl::lock() and Fl::unlock() to access FLTK widgets in child threads
    //    2. use Fl::awake(function_indicator) to post callbacks to main thread
    // I use a wrapper function NotifyGUI("Command") for method 2
    // here keeps code MainWindow::addLog() independent from these two methods
	std::time_t stRes = std::time(nullptr);
	std::string szFullMessage = std::asctime(std::localtime(&stRes));
	szFullMessage.back() = ' ';
	switch(nLogType){
		case 0:
			szFullMessage = "@C4" + szFullMessage + "  " + szMessage;
			break;
		case 1:
			szFullMessage = "@C9" + szFullMessage + "  " + szMessage;
			break;
		default:
			szFullMessage = "@C1" + szFullMessage + "  " + szMessage;
			break;
		}

    if(m_browser->size() > 5000){
        m_browser->remove(1);
    }

	m_browser->add(szFullMessage.c_str());
	m_browser->bottomline(m_browser->size());
}} {}
  }
  Function {addCWLogString(int nCWID, int nLogType, const char *szPrompt, const char *szMessage)} {return_type void
  } {
    code {// addCWLogString(int nCWID, int nLogType, const char *szPrompt, const char *szMessage)
{
    // this function only interact with FLTK
    // for multi-thread lock and unlock, don't put it here
    // for more information, read comments in MainWindow::addLog()

    // this function forwards all arguments to the command window
    // do nothing if no such command window
    if(auto pCW = getCommandWindow(nCWID)){
        pCW->addLog(nLogType, szPrompt, szMessage);
    }
}} {}
  }
  Function {getCommandWindow(int nCWID)} {return_type {CommandWindow *}
  } {
    code {// getCommandWindow(int nCWID)
// retrieve the command window pointer based on provided ID
{
    if(true
            && (nCWID > 0)
            && (m_menuItemFirstCW + (nCWID - 1) <= m_menuItemLastCW)
            && (m_menuItemFirstCW + (nCWID - 1))->visible()){
        return (CommandWindow *)((m_menuItemFirstCW + (nCWID - 1))->user_data());
    }
    else{
        return nullptr;
    }
}} {}
  }
  Function {CreateCommandWindow()} {return_type int
  } {
    code {// int CreateCommandWindow()
// main window create a new command window and store internally
// provide caller an ID returned for retrieve
{
    for(auto pMenuItem = m_menuItemFirstCW; pMenuItem != (m_menuItemLastCW + 1); ++pMenuItem){
        // because we use it as initialial status to do checking
        // it's very important to make sure all command window menu item are hidden
        if(pMenuItem->visible()){
            continue;
        }
        else{
            // we find a valid slot
            // won't create new command window if it contains one
            CommandWindow *pCW = nullptr;
            if(pMenuItem->user_data()){
                pCW = (CommandWindow *)(pMenuItem->user_data());
            }
            else{
                pCW = new CommandWindow();
                pMenuItem->user_data(pCW);
            }

            pMenuItem->deactivate();
            pMenuItem->show();

            pCW->setGUIFont(getGUIFont());
            pCW->bindLuaModule(to_u32(pMenuItem - m_menuItemFirstCW + 1));
            pCW->showAll();

            // the first item return 1
            // and takes <= 0 as invalid command window ID
            return pMenuItem - m_menuItemFirstCW + 1;
        }
    }

    // if all visible then return 0 as invalid
    return 0;
}} {}
  }
  Function {DeleteCommandWindow(int nCWID)} {return_type void
  } {
    code {// DeleteCommandWindow(int nCWID)
// delete a command window based on the nCWID
// do nothing if no such command window, after this funciton nCWID is ready for next creation
{
    if(true
            && (nCWID > 0 )                                         // valid command window index
            && (m_menuItemFirstCW + (nCWID - 1) <= m_menuItemLastCW)      //
            && (m_menuItemFirstCW + (nCWID - 1))->visible()               // menu item is ``in use"
            && (m_menuItemFirstCW + (nCWID - 1))->user_data()){           // menu item contains a command window

        // actually we won't delete the command window
        // instead we detach the lua module offside it and hide it only
        auto pMenuItem = m_menuItemFirstCW + (nCWID - 1);

        // 0. clear all history of the window
        //    we need a clean browser when we reuse it next time
        ((CommandWindow *)(pMenuItem->user_data()))->clearBrowser();

        // 1. detach the lua module inside it
        //    this will delete the internal lua module and its task hub
        ((CommandWindow *)(pMenuItem->user_data()))->detachLuaModule();

        // 2. hide the command window
        //    won't delete it, avoid delete widgets in FLTK
        ((CommandWindow *)(pMenuItem->user_data()))->hideAll();

        // 3. hide the menu item for the command window
        pMenuItem->hide();
    }
}} {}
  }
  Function {HideCommandWindow(int nCWID)} {return_type void
  } {
    code {// HideCommandWindow(int nCWID)
// call it in callback of commandwindow when handle esc
// won't detach the lua module or any destruction
{
    if(true
            && (nCWID > 0 )                                               // valid command window index
            && (m_menuItemFirstCW + (nCWID - 1) <= m_menuItemLastCW)      //
            && (m_menuItemFirstCW + (nCWID - 1))->visible()               // menu item is ``in use"
            && (m_menuItemFirstCW + (nCWID - 1))->user_data()){           // menu item contains a command window

        (m_menuItemFirstCW + (nCWID - 1))->activate();
    }
}} {}
  }
  Function {getCWHistory(int cwid) const} {return_type {const std::vector<std::string> &}
  } {
    code {// getCWHistory(int cwid)
// call it in callback of commandwindow when handle esc
// won't detach the lua module or any destruction
{
    if(auto cwPtr = const_cast<MainWindow *>(this)->getCommandWindow(cwid)){
        return cwPtr->getHistory();
    }

    const static std::vector<std::string> emptyList;
    return emptyList;
}} {}
  }
  Function {setGUIFont(int nFont)} {return_type void
  } {
    code {// setGUIFont(int nFont)
// call it in callback of Configure/Fonts/xxx
{
    m_browser->textfont((Fl_Font)(nFont));
    m_window->redraw();

    extern ScriptWindow *g_scriptWindow;
    g_scriptWindow->setGUIFont(nFont);

    for(int i = 1;; i++){
        if(auto cwPtr = getCommandWindow(i)){
            cwPtr->setGUIFont(nFont);
        }
        else{
            break;
        }
    }
}} {}
  }
  Function {getGUIFont()} {return_type int
  } {
    code {{
    return to_d(m_browser->textfont());
}} {}
  }
}
